var slice = Array.prototype.slice;

function addListeners(targets, eventName, listener) {
  var eventListeners = this._eventListeners;

  targets.forEach(function(target) {
    eventListeners.push([target, eventName, listener]);
    target.addEventListener(eventName, listener, false);
  });
}

/**
 * Zendesk component template.
 *
 * @constructor
 *
 * @param {DocumentFragment} fragment Template fragment for content
 */
function Template(fragment) {
  this.fragment = fragment;
}

Template.prototype = {
  /**
   * Gets template contents (clone of template fragment).
   *
   * @type {DocumentFragment}
   */
  get content() {
    return this.fragment.cloneNode(true);
  }
};

/**
 * Zendesk base component
 */
class ZComponent {
  /**
   * @constructor
   *
   * @param {object} options Options for component.
   * @param {Node} [options.el] Base element for component.
   */
  constructor(options = {}) {
    var el = options.el;

    this.id = options.id;
    this.classList = this.classList.concat(options.classList || []);

    if (options.children) {
      this.children = options.children;
    }

    if (!el) {
      el = this.constructor.template.content.firstChild;
    }

    this.setElement(el);
  }

  /**
   * Alias to querySelector.
   *
   * @param {string} selector Selector string
   * @type {Node}
   */
  $() {
    return this.el.querySelector.apply(this.el, arguments);
  }

  /**
   * Alias to querySelectorAll.
   *
   * @param {string} selector Selector string
   * @type {NodeList}
   */
  $$() {
    return this.el.querySelectorAll.apply(this.el, arguments);
  }

  /**
   * Gets id for component.
   */
  get id() {
    return this._id || '';
  }

  /**
   * Sets id for component.
   *
   * @type {string}
   */
  set id(val) {
    this._id = val;

    if (this.el && (val || this.el.id)) {
      this.el.id = val;
    }
  }

  /**
   * Gets template for component.
   *
   * @type {DocumentFragment}
   */
  static get template() {
    var fragment = document.createDocumentFragment(),
        template;

    fragment.appendChild(document.createElement(this.tagName));
    template = new Template(fragment);

    return template;
  }

  /**
   * Gets tag name for component.
   *
   * @type {string[]};
   */
  static get tagName() {
    return 'div';
  }

  /**
   * Gets list class names for component.
   *
   * @type {string[]}
   */
  get classList() {
    return this._classList || [];
  }

  /**
   * Sets list of class names for component. Concatenates to default list.
   *
   * @param {string[]} val Array of class names.
   */
  set classList(val) {
    this._classList = this.constructor.classList.concat(val || []);
  }

  /**
   * List of default class names for component.
   *
   * @abstract
   * @static
   * @type {string[]}
   */
  static get classList() {
    return [];
  }

  /**
   * DOM events mapping to event handlers.
   *
   * @abstract
   * @type {object}
   */
  get events() {
    return {};
  }

  /**
   * Gets children for component.
   *
   * @abstract
   * @type {NodeList}
   */
  get children() {
    return this._children;
  }

  /**
   * Sets children for component.
   *
   * @abstract
   * @type {HTMLCollection|Node[]}
   */
  set children(val = []) {
    this._children = Array.isArray(val) ? val : [].slice.call(val);
  }

  /**
   * Sets up component element.
   *
   * @param {Node} el Component element.
   */
  setElement(el) {
    var classList = el.classList;

    this.undelegateEvents();
    this.el = el;
    this.el.id = this.id;
    classList.add.apply(classList, this.classList);
    this.delegateEvents();
  }

  /**
   * Delegates events (keys) from events property to event handlers (values).
   */
  delegateEvents() {
    var eventListeners = this._eventListeners,
        events = this.events,
        el = this.el;

    if (!eventListeners) {
      eventListeners = this._eventListeners = [];
    }

    for (var name in events) {
      let splat = name.split(' '),
          eventName = splat[0],
          selector = splat[1],
          targets = selector ? slice.call(this.$$(selector)) : [el],
          listener = this[events[name]];

      if (!listener) { continue; }

      listener = listener.bind(this);
      addListeners.call(this, targets, eventName, listener);
    }
  }

  /**
   * Undelegates all events from events property.
   */
  undelegateEvents() {
    if (!this._eventListeners) { return; }

    while (this._eventListeners.length > 0) {
      let data = this._eventListeners.pop(),
          element = data[0],
          eventName = data[1],
          handler = data[2];

      element.removeEventListener(eventName, handler, false);
    }
  }

  /**
   * Appends component to target element.
   *
   * @param {Node} target Target element for appending.
   */
  appendTo(target) {
    target.appendChild(this.el);
  }

  /**
   * Prepends component to target element.
   *
   * @param {Node} target Target element for prepending.
   */
  prependTo(target) {
    target.insertBefore(this.el, target.firstChild);
  }

  /**
   * Removes component from DOM.
   */
  remove() {
    var el = this.el;

    this.undelegateEvents();

    if (el.parentNode) {
      el.parentNode.removeChild(el);
    }
  }
}

export default ZComponent;
